package com.github.leftisttachyon.dsiworld.controller;

import com.github.leftisttachyon.dsiworld.data.User;
import com.github.leftisttachyon.dsiworld.data.UserList;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

/**
 * A class that acts as a controller for logging in, logging out, and other various user actions.
 */
@Slf4j
@Controller
public class LoginController {
    /**
     * The list of {@link com.github.leftisttachyon.dsiworld.data.User users} on this server
     */
    private final UserList userList;

    /**
     * Creates a new {@link LoginController} instance
     *
     * @param userList the list of users to use
     */
    @Autowired
    public LoginController(UserList userList) {
        this.userList = userList;
    }

    /**
     * Attempts to log in the user with the given credentials.
     *
     * @param request            the {@link HttpServletRequest} generated by the user
     * @param redirectAttributes the attributes to show to the redirected page, if any
     * @return the view or redirected page to show the user next
     */
    @PostMapping("/login")
    public String doLogin(HttpServletRequest request, RedirectAttributes redirectAttributes) {
        String username = request.getParameter("username"), password = request.getParameter("password");
        User u = userList.attemptLogin(username, password);
        if (u != null) {
            // get redirection directions
            String redirectTo = (String) request.getSession().getAttribute("redirectTo");

            // Invalidating session, if any exists
            request.getSession().invalidate();

            HttpSession newSession = request.getSession(true);
            newSession.setMaxInactiveInterval(3600);
            newSession.setAttribute("user", u);

            // redirect to wherever needed
            if (redirectTo == null) {
                return "redirect:/member";
            } else {
                request.getSession().removeAttribute("redirectTo");
                return "redirect:" + redirectTo;
            }
        } else {
            // Bad username or password
            redirectAttributes.addFlashAttribute("reject_reason", "Incorrect username or password");
            return "redirect:/login";
        }
    }

    /**
     * Logs the current user out.
     *
     * @return the next view to show the user
     */
    @GetMapping("/logout")
    public String logout() {
        return "redirect:/";
    }
}
